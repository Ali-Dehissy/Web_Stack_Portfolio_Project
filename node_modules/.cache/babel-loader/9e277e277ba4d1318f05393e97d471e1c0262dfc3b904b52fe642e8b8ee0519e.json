{"ast":null,"code":"import axios from 'axios';\nexport const fetchTournaments = async () => {\n  const apiKey = 'YOUR_API_KEY'; // Replace with your actual API key\n  const url = 'https://api.pandascore.co/lol/tournaments/upcoming'; // Ensure this is the correct endpoint\n\n  try {\n    const response = await axios.get(url, {\n      headers: {\n        'Authorization': `Bearer ${apiKey}`\n      }\n    });\n    const tournamentsData = response.data.data || []; // Adjust according to the actual response structure\n\n    if (tournamentsData.length === 0) {\n      throw new Error('No upcoming tournaments found');\n    }\n    return tournamentsData;\n  } catch (error) {\n    console.error('Error fetching tournaments:', error); // Log the error for debugging\n    if (error.response) {\n      console.error('API Response:', error.response.data); // Log the API response if available\n    }\n    throw new Error('Error fetching tournaments: Please try again later.'); // Customize the error message\n  }\n};","map":{"version":3,"names":["axios","fetchTournaments","apiKey","url","response","get","headers","tournamentsData","data","length","Error","error","console"],"sources":["/home/ali/Tunisian-Esports-Champions-/src/components/tournamentService.js"],"sourcesContent":["import axios from 'axios';\n\nexport const fetchTournaments = async () => {\n    const apiKey = 'YOUR_API_KEY'; // Replace with your actual API key\n    const url = 'https://api.pandascore.co/lol/tournaments/upcoming'; // Ensure this is the correct endpoint\n\n    try {\n        const response = await axios.get(url, {\n            headers: {\n                'Authorization': `Bearer ${apiKey}`\n            }\n        });\n\n        const tournamentsData = response.data.data || []; // Adjust according to the actual response structure\n\n        if (tournamentsData.length === 0) {\n            throw new Error('No upcoming tournaments found');\n        }\n\n        return tournamentsData;\n    } catch (error) {\n        console.error('Error fetching tournaments:', error); // Log the error for debugging\n        if (error.response) {\n            console.error('API Response:', error.response.data); // Log the API response if available\n        }\n        throw new Error('Error fetching tournaments: Please try again later.'); // Customize the error message\n    }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAMC,MAAM,GAAG,cAAc,CAAC,CAAC;EAC/B,MAAMC,GAAG,GAAG,oDAAoD,CAAC,CAAC;;EAElE,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAACF,GAAG,EAAE;MAClCG,OAAO,EAAE;QACL,eAAe,EAAE,UAAUJ,MAAM;MACrC;IACJ,CAAC,CAAC;IAEF,MAAMK,eAAe,GAAGH,QAAQ,CAACI,IAAI,CAACA,IAAI,IAAI,EAAE,CAAC,CAAC;;IAElD,IAAID,eAAe,CAACE,MAAM,KAAK,CAAC,EAAE;MAC9B,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;IACpD;IAEA,OAAOH,eAAe;EAC1B,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC,CAAC,CAAC;IACrD,IAAIA,KAAK,CAACP,QAAQ,EAAE;MAChBQ,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAACP,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;IACzD;IACA,MAAM,IAAIE,KAAK,CAAC,qDAAqD,CAAC,CAAC,CAAC;EAC5E;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}